package messages

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CommonHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ct":
			z.SourceKafkaTopic, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "SourceKafkaTopic")
				return
			}
		case "cO":
			z.SourceKafkaOffset, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SourceKafkaOffset")
				return
			}
		case "cN":
			z.SourceSeqNum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SourceSeqNum")
				return
			}
		case "cS":
			z.SeqNum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SeqNum")
				return
			}
		case "cK":
			z.KafkaOffset, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "KafkaOffset")
				return
			}
		case "cT":
			z.TransactionId, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TransactionId")
				return
			}
		case "cA":
			z.InputTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "InputTime")
				return
			}
		case "ca":
			z.SendTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SendTime")
				return
			}
		case "cL":
			z.IsLastTransaction, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLastTransaction")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CommonHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.SourceKafkaTopic == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SourceKafkaOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.SourceSeqNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.SeqNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.KafkaOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.TransactionId == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.InputTime == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.SendTime == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "ct"
		err = en.Append(0xa2, 0x63, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt8(z.SourceKafkaTopic)
		if err != nil {
			err = msgp.WrapError(err, "SourceKafkaTopic")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "cO"
		err = en.Append(0xa2, 0x63, 0x4f)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.SourceKafkaOffset)
		if err != nil {
			err = msgp.WrapError(err, "SourceKafkaOffset")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "cN"
		err = en.Append(0xa2, 0x63, 0x4e)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.SourceSeqNum)
		if err != nil {
			err = msgp.WrapError(err, "SourceSeqNum")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "cS"
		err = en.Append(0xa2, 0x63, 0x53)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.SeqNum)
		if err != nil {
			err = msgp.WrapError(err, "SeqNum")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "cK"
		err = en.Append(0xa2, 0x63, 0x4b)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.KafkaOffset)
		if err != nil {
			err = msgp.WrapError(err, "KafkaOffset")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "cT"
		err = en.Append(0xa2, 0x63, 0x54)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.TransactionId)
		if err != nil {
			err = msgp.WrapError(err, "TransactionId")
			return
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "cA"
		err = en.Append(0xa2, 0x63, 0x41)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.InputTime)
		if err != nil {
			err = msgp.WrapError(err, "InputTime")
			return
		}
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// write "ca"
		err = en.Append(0xa2, 0x63, 0x61)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.SendTime)
		if err != nil {
			err = msgp.WrapError(err, "SendTime")
			return
		}
	}
	// write "cL"
	err = en.Append(0xa2, 0x63, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLastTransaction)
	if err != nil {
		err = msgp.WrapError(err, "IsLastTransaction")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CommonHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	_ = zb0001Mask
	if z.SourceKafkaTopic == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SourceKafkaOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.SourceSeqNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.SeqNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.KafkaOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.TransactionId == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.InputTime == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.SendTime == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "ct"
		o = append(o, 0xa2, 0x63, 0x74)
		o = msgp.AppendInt8(o, z.SourceKafkaTopic)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "cO"
		o = append(o, 0xa2, 0x63, 0x4f)
		o = msgp.AppendInt64(o, z.SourceKafkaOffset)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "cN"
		o = append(o, 0xa2, 0x63, 0x4e)
		o = msgp.AppendInt64(o, z.SourceSeqNum)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "cS"
		o = append(o, 0xa2, 0x63, 0x53)
		o = msgp.AppendInt64(o, z.SeqNum)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "cK"
		o = append(o, 0xa2, 0x63, 0x4b)
		o = msgp.AppendInt64(o, z.KafkaOffset)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "cT"
		o = append(o, 0xa2, 0x63, 0x54)
		o = msgp.AppendInt64(o, z.TransactionId)
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "cA"
		o = append(o, 0xa2, 0x63, 0x41)
		o = msgp.AppendInt64(o, z.InputTime)
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// string "ca"
		o = append(o, 0xa2, 0x63, 0x61)
		o = msgp.AppendInt64(o, z.SendTime)
	}
	// string "cL"
	o = append(o, 0xa2, 0x63, 0x4c)
	o = msgp.AppendBool(o, z.IsLastTransaction)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommonHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ct":
			z.SourceKafkaTopic, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceKafkaTopic")
				return
			}
		case "cO":
			z.SourceKafkaOffset, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceKafkaOffset")
				return
			}
		case "cN":
			z.SourceSeqNum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceSeqNum")
				return
			}
		case "cS":
			z.SeqNum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SeqNum")
				return
			}
		case "cK":
			z.KafkaOffset, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "KafkaOffset")
				return
			}
		case "cT":
			z.TransactionId, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionId")
				return
			}
		case "cA":
			z.InputTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InputTime")
				return
			}
		case "ca":
			z.SendTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SendTime")
				return
			}
		case "cL":
			z.IsLastTransaction, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLastTransaction")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CommonHeader) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int8Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.BoolSize
	return
}
