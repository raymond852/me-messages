package messages

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *UserTierCommission) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommonHeader":
			err = z.CommonHeader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CommonHeader")
				return
			}
		case "Tier":
			z.Tier, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Tier")
				return
			}
		case "Commission":
			z.Commission, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Commission")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserTierCommission) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CommonHeader"
	err = en.Append(0x83, 0xac, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.CommonHeader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CommonHeader")
		return
	}
	// write "Tier"
	err = en.Append(0xa4, 0x54, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Tier)
	if err != nil {
		err = msgp.WrapError(err, "Tier")
		return
	}
	// write "Commission"
	err = en.Append(0xaa, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Commission)
	if err != nil {
		err = msgp.WrapError(err, "Commission")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserTierCommission) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CommonHeader"
	o = append(o, 0x83, 0xac, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.CommonHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CommonHeader")
		return
	}
	// string "Tier"
	o = append(o, 0xa4, 0x54, 0x69, 0x65, 0x72)
	o = msgp.AppendInt32(o, z.Tier)
	// string "Commission"
	o = append(o, 0xaa, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt32(o, z.Commission)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserTierCommission) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommonHeader":
			bts, err = z.CommonHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CommonHeader")
				return
			}
		case "Tier":
			z.Tier, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tier")
				return
			}
		case "Commission":
			z.Commission, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Commission")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserTierCommission) Msgsize() (s int) {
	s = 1 + 13 + z.CommonHeader.Msgsize() + 5 + msgp.Int32Size + 11 + msgp.Int32Size
	return
}
