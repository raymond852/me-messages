package messages

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BalanceUpdate) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommonHeader":
			err = z.CommonHeader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CommonHeader")
				return
			}
		case "u":
			z.UserId, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "UserId")
				return
			}
		case "a":
			z.AssetId, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "AssetId")
				return
			}
		case "t":
			z.Total, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "l":
			z.Locked, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Locked")
				return
			}
		case "d":
			z.Delta, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Delta")
				return
			}
		case "p":
			z.Type, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BalanceUpdate) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "CommonHeader"
	err = en.Append(0x87, 0xac, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.CommonHeader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CommonHeader")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.UserId)
	if err != nil {
		err = msgp.WrapError(err, "UserId")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.AssetId)
	if err != nil {
		err = msgp.WrapError(err, "AssetId")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Total)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Locked)
	if err != nil {
		err = msgp.WrapError(err, "Locked")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Delta)
	if err != nil {
		err = msgp.WrapError(err, "Delta")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BalanceUpdate) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "CommonHeader"
	o = append(o, 0x87, 0xac, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.CommonHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CommonHeader")
		return
	}
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendInt32(o, z.UserId)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendInt32(o, z.AssetId)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt64(o, z.Total)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendInt64(o, z.Locked)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendInt64(o, z.Delta)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendInt8(o, z.Type)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BalanceUpdate) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommonHeader":
			bts, err = z.CommonHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CommonHeader")
				return
			}
		case "u":
			z.UserId, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserId")
				return
			}
		case "a":
			z.AssetId, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AssetId")
				return
			}
		case "t":
			z.Total, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "l":
			z.Locked, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Locked")
				return
			}
		case "d":
			z.Delta, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Delta")
				return
			}
		case "p":
			z.Type, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BalanceUpdate) Msgsize() (s int) {
	s = 1 + 13 + z.CommonHeader.Msgsize() + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int8Size
	return
}
